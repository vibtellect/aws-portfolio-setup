AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Budget Automation Infrastructure - Cost monitoring, alerting, and automated resource management'

Parameters:
  BudgetLimit:
    Type: Number
    Default: 20
    Description: Monthly budget limit in USD
    MinValue: 1
    MaxValue: 10000
  
  AlertEmail:
    Type: String
    Description: Email address for budget alerts
    AllowedPattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    ConstraintDescription: Must be a valid email address
  
  EnableAutomatedShutdown:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable automated resource shutdown when budget thresholds are exceeded
  
  SchedulerTagKey:
    Type: String
    Default: 'AutoSchedule'
    Description: Tag key used for resource scheduling
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: Environment name for resource tagging

Conditions:
  EnableShutdown: !Equals [!Ref EnableAutomatedShutdown, 'true']

Resources:
  # SNS Topic for Budget Alerts
  BudgetAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-budget-alerts'
      DisplayName: 'AWS Budget Alerts'
      KmsMasterKeyId: alias/aws/sns

  # SNS Subscription for Email Alerts
  BudgetAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref BudgetAlertTopic
      Protocol: email
      Endpoint: !Ref AlertEmail

  # AWS Budget with Multiple Thresholds
  PortfolioBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub '${AWS::StackName}-monthly-budget'
        BudgetLimit:
          Amount: !Ref BudgetLimit
          Unit: USD
        TimeUnit: MONTHLY
        BudgetType: COST
        CostFilters:
          Service:
            - Amazon Elastic Compute Cloud - Compute
            - Amazon Relational Database Service
            - Amazon Simple Storage Service
            - AWS Lambda
            - Amazon CloudWatch
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 50
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AlertEmail
            - SubscriptionType: SNS
              Address: !Ref BudgetAlertTopic
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AlertEmail
            - SubscriptionType: SNS
              Address: !Ref BudgetAlertTopic
        - Notification:
            NotificationType: FORECASTED
            ComparisonOperator: GREATER_THAN
            Threshold: 100
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AlertEmail
            - SubscriptionType: SNS
              Address: !Ref BudgetAlertTopic

  # IAM Role for Budget Shutdown Lambda
  BudgetShutdownLambdaRole:
    Type: AWS::IAM::Role
    Condition: EnableShutdown
    Properties:
      RoleName: !Sub '${AWS::StackName}-budget-shutdown-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BudgetShutdownPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                  - ec2:TerminateInstances
                  - rds:DescribeDBInstances
                  - rds:StopDBInstance
                  - rds:DescribeDBClusters
                  - rds:StopDBCluster
                  - ecs:DescribeClusters
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:StopTask
                  - ecs:ListTasks
                  - sns:Publish
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref BudgetAlertTopic

  # Lambda Function for Budget-Based Shutdown
  BudgetShutdownFunction:
    Type: AWS::Lambda::Function
    Condition: EnableShutdown
    Properties:
      FunctionName: !Sub '${AWS::StackName}-budget-shutdown'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt BudgetShutdownLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BudgetAlertTopic
          BUDGET_LIMIT: !Ref BudgetLimit
          SCHEDULER_TAG_KEY: !Ref SchedulerTagKey
          ENVIRONMENT: !Ref Environment
          DISABLE_SHUTDOWN: 'false'
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """Budget alert handler - stops resources when thresholds are exceeded"""
              try:
                  logger.info("Budget shutdown handler triggered")
                  logger.info(f"Event: {json.dumps(event)}")
                  
                  # Parse SNS message
                  if 'Records' in event:
                      for record in event['Records']:
                          if record.get('EventSource') == 'aws:sns':
                              message = json.loads(record['Sns']['Message'])
                              handle_budget_alert(message)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Budget alert processed successfully')
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing budget alert: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

          def handle_budget_alert(message):
              """Handle budget alert message"""
              # This is a placeholder - actual implementation would be deployed separately
              logger.info(f"Processing budget alert: {message}")
              return True

  # SNS Topic Permission for Budget Service
  BudgetAlertTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref BudgetAlertTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowBudgetsToPublish
            Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action: sns:Publish
            Resource: !Ref BudgetAlertTopic
          - Sid: AllowLambdaToPublish
            Effect: Allow
            Principal:
              AWS: !Sub '${AWS::AccountId}'
            Action: sns:Publish
            Resource: !Ref BudgetAlertTopic

  # Lambda Permission for SNS Trigger
  BudgetShutdownInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: EnableShutdown
    Properties:
      FunctionName: !Ref BudgetShutdownFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref BudgetAlertTopic

  # SNS Subscription for Lambda Trigger
  BudgetShutdownSubscription:
    Type: AWS::SNS::Subscription
    Condition: EnableShutdown
    Properties:
      TopicArn: !Ref BudgetAlertTopic
      Protocol: lambda
      Endpoint: !GetAtt BudgetShutdownFunction.Arn

  # IAM Role for Resource Scheduler Lambda
  ResourceSchedulerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-resource-scheduler-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ResourceSchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - rds:DescribeDBInstances
                  - rds:StartDBInstance
                  - rds:StopDBInstance
                  - rds:DescribeDBClusters
                  - rds:StartDBCluster
                  - rds:StopDBCluster
                  - ec2:DescribeTags
                  - rds:ListTagsForResource
                  - sns:Publish
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function for Resource Scheduling
  ResourceSchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-resource-scheduler'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ResourceSchedulerLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BudgetAlertTopic
          SCHEDULER_TAG_KEY: !Ref SchedulerTagKey
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime, timezone

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """Resource scheduler handler"""
              try:
                  logger.info("Resource scheduler triggered")
                  
                  # This is a placeholder - actual implementation would be deployed separately
                  result = {
                      'statusCode': 200,
                      'message': 'Resource scheduling completed',
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
                  
                  logger.info(f"Scheduling result: {result}")
                  return result
                  
              except Exception as e:
                  logger.error(f"Error in resource scheduler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'error': str(e)
                  }

  # EventBridge Rule for Resource Scheduling (every hour)
  ResourceSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-resource-scheduler-rule'
      Description: 'Trigger resource scheduler every hour'
      ScheduleExpression: 'rate(1 hour)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ResourceSchedulerFunction.Arn
          Id: ResourceSchedulerTarget

  # EventBridge Permission for Lambda
  ResourceSchedulerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResourceSchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ResourceSchedulerRule.Arn

  # IAM Role for S3 Lifecycle Optimizer
  S3LifecycleOptimizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-s3-lifecycle-optimizer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3LifecycleOptimizerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetBucketVersioning
                  - s3:GetLifecycleConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:ListMultipartUploads
                  - s3:AbortMultipartUpload
                  - s3:DeleteBucket
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:PutMetricData
                  - sns:Publish
                Resource: '*'

  # Lambda Function for S3 Lifecycle Optimization
  S3LifecycleOptimizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-s3-lifecycle-optimizer'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt S3LifecycleOptimizerRole.Arn
      Timeout: 300
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BudgetAlertTopic
          DRY_RUN: 'true'
          LIFECYCLE_DAYS_IA: '30'
          LIFECYCLE_DAYS_GLACIER: '90'
          LIFECYCLE_DAYS_DEEP_ARCHIVE: '365'
          DELETE_INCOMPLETE_UPLOADS_DAYS: '7'
          DELETE_OLD_VERSIONS_DAYS: '90'
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          from datetime import datetime, timezone

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """S3 lifecycle optimizer handler"""
              try:
                  logger.info("S3 lifecycle optimizer triggered")
                  
                  # This is a placeholder - actual implementation would be deployed separately
                  result = {
                      'statusCode': 200,
                      'message': 'S3 lifecycle optimization completed',
                      'timestamp': datetime.now(timezone.utc).isoformat()
                  }
                  
                  logger.info(f"Optimization result: {result}")
                  return result
                  
              except Exception as e:
                  logger.error(f"Error in S3 optimization: {str(e)}")
                  return {
                      'statusCode': 500,
                      'error': str(e)
                  }

  # EventBridge Rule for S3 Lifecycle Optimization (weekly)
  S3LifecycleOptimizerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-s3-lifecycle-optimizer-rule'
      Description: 'Trigger S3 lifecycle optimizer weekly'
      ScheduleExpression: 'rate(7 days)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt S3LifecycleOptimizerFunction.Arn
          Id: S3LifecycleOptimizerTarget

  # EventBridge Permission for S3 Optimizer Lambda
  S3LifecycleOptimizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3LifecycleOptimizerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3LifecycleOptimizerRule.Arn

  # CloudWatch Dashboard for Budget Monitoring
  BudgetMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${AWS::StackName}-budget-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Billing", "EstimatedCharges", "Currency", "USD" ]
                ],
                "period": 86400,
                "stat": "Maximum",
                "region": "us-east-1",
                "title": "AWS Estimated Charges",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": ${BudgetLimit}
                  }
                },
                "annotations": {
                  "horizontal": [
                    {
                      "value": ${BudgetLimit},
                      "label": "Budget Limit"
                    }
                  ]
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", { "stat": "Average" } ],
                  [ "AWS/RDS", "CPUUtilization", { "stat": "Average" } ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Utilization"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${AWS::StackName}-budget-shutdown'\n| fields @timestamp, @message\n| filter @message like /Budget alert/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Budget Alert Logs"
              }
            }
          ]
        }

Outputs:
  BudgetName:
    Description: 'Name of the created budget'
    Value: !Sub '${AWS::StackName}-monthly-budget'
    Export:
      Name: !Sub '${AWS::StackName}-BudgetName'

  SNSTopicArn:
    Description: 'ARN of the SNS topic for budget alerts'
    Value: !Ref BudgetAlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  BudgetShutdownFunctionArn:
    Condition: EnableShutdown
    Description: 'ARN of the budget shutdown Lambda function'
    Value: !GetAtt BudgetShutdownFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BudgetShutdownFunctionArn'

  ResourceSchedulerFunctionArn:
    Description: 'ARN of the resource scheduler Lambda function'
    Value: !GetAtt ResourceSchedulerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ResourceSchedulerFunctionArn'

  S3LifecycleOptimizerFunctionArn:
    Description: 'ARN of the S3 lifecycle optimizer Lambda function'
    Value: !GetAtt S3LifecycleOptimizerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3LifecycleOptimizerFunctionArn'

  DashboardURL:
    Description: 'URL of the CloudWatch dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-budget-monitoring'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'