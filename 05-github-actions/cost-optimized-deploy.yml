name: Cost-Optimized AWS Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Automatische Shutdowns: Mo-Fr 18:00 UTC
    - cron: '0 18 * * 1-5'
    # Automatische Starts: Mo-Fr 8:00 UTC  
    - cron: '0 8 * * 1-5'

env:
  AWS_REGION: eu-central-1
  BUDGET_LIMIT: 10  # 10â‚¬ Budget Limit
  NODE_VERSION: 18
  PYTHON_VERSION: 3.11
  GO_VERSION: 1.21

jobs:
  cost-check:
    name: Budget Check
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.budget.outputs.proceed }}
      current-cost: ${{ steps.budget.outputs.current-cost }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Current Month Budget
        id: budget
        run: |
          # Get current month costs
          CURRENT_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$(date +%Y-%m-01),End=$(date +%Y-%m-%d) \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)
          
          echo "current-cost=$CURRENT_COST" >> $GITHUB_OUTPUT
          
          # Check if we're under budget
          if (( $(echo "$CURRENT_COST > $BUDGET_LIMIT" | bc -l) )); then
            echo "ðŸš¨ Budget exceeded: $CURRENT_COSTâ‚¬ > $BUDGET_LIMITâ‚¬"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "âœ… Budget OK: $CURRENT_COSTâ‚¬ / $BUDGET_LIMITâ‚¬"
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: cost-check
    if: needs.cost-check.outputs.proceed == 'true' && github.event_name != 'schedule'
    outputs:
      deployment-needed: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for Infrastructure Changes
        id: changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '\.(tf|ts|json)$|cdk\.'; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "infrastructure=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.changes.outputs.infrastructure == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install CDK
        if: steps.changes.outputs.infrastructure == 'true'
        run: |
          npm install -g aws-cdk
          npm install

      - name: Configure AWS credentials
        if: steps.changes.outputs.infrastructure == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK Bootstrap (if needed)
        if: steps.changes.outputs.infrastructure == 'true'
        run: |
          cdk bootstrap aws://$(aws sts get-caller-identity --query Account --output text)/${{ env.AWS_REGION }}

      - name: CDK Diff
        if: steps.changes.outputs.infrastructure == 'true'
        run: cdk diff

      - name: CDK Deploy
        if: steps.changes.outputs.infrastructure == 'true' && github.ref == 'refs/heads/main'
        run: |
          cdk deploy --all --require-approval never --tags \
            Project=Portfolio \
            Environment=Production \
            Owner=Vitalij \
            AutoShutdown=true

  build-and-test:
    name: Build & Test Applications
    runs-on: ubuntu-latest
    needs: [cost-check, infrastructure]
    if: needs.cost-check.outputs.proceed == 'true'
    strategy:
      matrix:
        service:
          - name: python-api
            path: './src/python-service'
            runtime: python
          - name: go-api
            path: './src/go-service'
            runtime: go
          - name: node-api
            path: './src/node-service'
            runtime: node
          - name: java-api
            path: './src/java-service'
            runtime: java
          - name: angular-frontend
            path: './src/frontend'
            runtime: node
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        if: matrix.service.runtime == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Go
        if: matrix.service.runtime == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        if: matrix.service.runtime == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service.path }}/package-lock.json

      - name: Setup Java
        if: matrix.service.runtime == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Dependencies & Test
        working-directory: ${{ matrix.service.path }}
        run: |
          case "${{ matrix.service.runtime }}" in
            python)
              pip install -r requirements.txt
              pip install -r requirements-dev.txt
              pytest
              ;;
            go)
              go mod download
              go test ./...
              go build -o bin/service
              ;;
            node)
              npm ci
              npm run test
              npm run build
              ;;
            java)
              ./mvnw test
              ./mvnw package -DskipTests
              ;;
          esac

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker Image (for ECS services)
        if: matrix.service.runtime != 'node' || matrix.service.name != 'angular-frontend'
        env:
          ECR_REPOSITORY: portfolio-${{ matrix.service.name }}
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin \
            $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

          # Build and tag image
          docker build -t $ECR_REPOSITORY ${{ matrix.service.path }}
          docker tag $ECR_REPOSITORY:latest \
            $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:latest \
            $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:${{ github.sha }}

          # Push images
          docker push $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
          docker push $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:${{ github.sha }}

      - name: Deploy Lambda Functions
        if: contains(matrix.service.name, 'api') && matrix.service.runtime != 'java'
        run: |
          case "${{ matrix.service.runtime }}" in
            python)
              cd ${{ matrix.service.path }}
              zip -r ../function.zip .
              aws lambda update-function-code \
                --function-name portfolio-${{ matrix.service.name }} \
                --zip-file fileb://../function.zip
              ;;
            go)
              cd ${{ matrix.service.path }}
              GOOS=linux GOARCH=amd64 go build -o bootstrap main.go
              zip function.zip bootstrap
              aws lambda update-function-code \
                --function-name portfolio-${{ matrix.service.name }} \
                --zip-file fileb://function.zip
              ;;
            node)
              cd ${{ matrix.service.path }}
              npm ci --only=production
              zip -r ../function.zip .
              aws lambda update-function-code \
                --function-name portfolio-${{ matrix.service.name }} \
                --zip-file fileb://../function.zip
              ;;
          esac

      - name: Deploy to S3 (Frontend)
        if: matrix.service.name == 'angular-frontend'
        run: |
          aws s3 sync ${{ matrix.service.path }}/dist/ s3://portfolio-frontend-bucket --delete
          aws cloudfront create-invalidation --distribution-id $(aws cloudformation describe-stacks \
            --stack-name portfolio-frontend --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text) \
            --paths "/*"

  scheduled-operations:
    name: Scheduled Operations (Start/Stop)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start Services (Morning)
        if: github.event.schedule == '0 8 * * 1-5'
        run: |
          echo "ðŸŒ… Starting services for the day..."
          
          # Start ECS Services
          aws ecs update-service \
            --cluster portfolio-cluster \
            --service portfolio-microservices \
            --desired-count 1
          
          echo "âœ… Services started"

      - name: Stop Services (Evening)
        if: github.event.schedule == '0 18 * * 1-5'
        run: |
          echo "ðŸŒ™ Stopping services to save costs..."
          
          # Stop ECS Services
          aws ecs update-service \
            --cluster portfolio-cluster \
            --service portfolio-microservices \
            --desired-count 0
          
          echo "âœ… Services stopped"

  cost-report:
    name: Daily Cost Report
    runs-on: ubuntu-latest
    if: always()
    needs: [cost-check, infrastructure, build-and-test]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Cost Report
        run: |
          echo "## ðŸ’° AWS Cost Report" >> $GITHUB_STEP_SUMMARY
          echo "**Current Month**: $(date +'%B %Y')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Current month cost by service
          aws ce get-cost-and-usage \
            --time-period Start=$(date +%Y-%m-01),End=$(date +%Y-%m-%d) \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --query 'ResultsByTime[0].Groups[?Total.BlendedCost.Amount > `0.01`].[Keys[0], Total.BlendedCost.Amount]' \
            --output table >> cost_report.txt
          
          echo "### Cost by Service" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat cost_report.txt >> $GITHUB_STEP_SUMMARY  
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          TOTAL_COST=${{ needs.cost-check.outputs.current-cost }}
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Current Month**: ${TOTAL_COST}â‚¬ / ${{ env.BUDGET_LIMIT }}â‚¬" >> $GITHUB_STEP_SUMMARY
          echo "**Budget Usage**: $(echo "scale=1; $TOTAL_COST * 100 / ${{ env.BUDGET_LIMIT }}" | bc)%" >> $GITHUB_STEP_SUMMARY

  emergency-shutdown:
    name: Emergency Budget Shutdown
    runs-on: ubuntu-latest
    needs: cost-check
    if: needs.cost-check.outputs.proceed == 'false'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Emergency Shutdown
        run: |
          echo "ðŸš¨ EMERGENCY: Budget exceeded! Shutting down all services..."
          
          # Stop all ECS services
          for cluster in $(aws ecs list-clusters --query 'clusterArns[]' --output text); do
            for service in $(aws ecs list-services --cluster $cluster --query 'serviceArns[]' --output text); do
              aws ecs update-service --cluster $cluster --service $service --desired-count 0
            done
          done
          
          # Delete all load balancers (expensive!)
          for lb in $(aws elbv2 describe-load-balancers --query 'LoadBalancers[?Scheme==`internet-facing`].LoadBalancerArn' --output text); do
            aws elbv2 delete-load-balancer --load-balancer-arn $lb
          done
          
          echo "âœ… Emergency shutdown completed"

      - name: Send Budget Alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸš¨ AWS Budget Alert: Monthly limit of ${{ env.BUDGET_LIMIT }}â‚¬ exceeded! Emergency shutdown initiated."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}